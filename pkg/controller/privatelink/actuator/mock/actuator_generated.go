// Code generated by MockGen. DO NOT EDIT.
// Source: ./actuator.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift/hive/apis/hive/v1"
	actuator "github.com/openshift/hive/pkg/controller/privatelink/actuator"
	logrus "github.com/sirupsen/logrus"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// MockActuator is a mock of Actuator interface.
type MockActuator struct {
	ctrl     *gomock.Controller
	recorder *MockActuatorMockRecorder
}

// MockActuatorMockRecorder is the mock recorder for MockActuator.
type MockActuatorMockRecorder struct {
	mock *MockActuator
}

// NewMockActuator creates a new mock instance.
func NewMockActuator(ctrl *gomock.Controller) *MockActuator {
	mock := &MockActuator{ctrl: ctrl}
	mock.recorder = &MockActuatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActuator) EXPECT() *MockActuatorMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockActuator) Cleanup(arg0 *v1.ClusterDeployment, arg1 *v1.ClusterMetadata, arg2 logrus.FieldLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockActuatorMockRecorder) Cleanup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockActuator)(nil).Cleanup), arg0, arg1, arg2)
}

// CleanupRequired mocks base method.
func (m *MockActuator) CleanupRequired(arg0 *v1.ClusterDeployment) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupRequired", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CleanupRequired indicates an expected call of CleanupRequired.
func (mr *MockActuatorMockRecorder) CleanupRequired(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupRequired", reflect.TypeOf((*MockActuator)(nil).CleanupRequired), arg0)
}

// Reconcile mocks base method.
func (m *MockActuator) Reconcile(arg0 *v1.ClusterDeployment, arg1 *v1.ClusterMetadata, arg2 *actuator.DnsRecord, arg3 logrus.FieldLogger) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockActuatorMockRecorder) Reconcile(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockActuator)(nil).Reconcile), arg0, arg1, arg2, arg3)
}

// ShouldSync mocks base method.
func (m *MockActuator) ShouldSync(arg0 *v1.ClusterDeployment) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldSync", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldSync indicates an expected call of ShouldSync.
func (mr *MockActuatorMockRecorder) ShouldSync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldSync", reflect.TypeOf((*MockActuator)(nil).ShouldSync), arg0)
}
