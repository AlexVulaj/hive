// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gcpclient "github.com/openshift/hive/pkg/gcpclient"
	compute "google.golang.org/api/compute/v1"
	dns "google.golang.org/api/dns/v1"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddResourceRecordSet mocks base method.
func (m *MockClient) AddResourceRecordSet(managedZone string, recordSet *dns.ResourceRecordSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResourceRecordSet", managedZone, recordSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddResourceRecordSet indicates an expected call of AddResourceRecordSet.
func (mr *MockClientMockRecorder) AddResourceRecordSet(managedZone, recordSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResourceRecordSet", reflect.TypeOf((*MockClient)(nil).AddResourceRecordSet), managedZone, recordSet)
}

// CreateAddress mocks base method.
func (m *MockClient) CreateAddress(addressName, region, subnetwork string) (*compute.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", addressName, region, subnetwork)
	ret0, _ := ret[0].(*compute.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddress indicates an expected call of CreateAddress.
func (mr *MockClientMockRecorder) CreateAddress(addressName, region, subnetwork interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockClient)(nil).CreateAddress), addressName, region, subnetwork)
}

// CreateFirewall mocks base method.
func (m *MockClient) CreateFirewall(firewall string, allowed []*compute.FirewallAllowed, direction, network string, sourceRanges, targetTags []string) (*compute.Firewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFirewall", firewall, allowed, direction, network, sourceRanges, targetTags)
	ret0, _ := ret[0].(*compute.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFirewall indicates an expected call of CreateFirewall.
func (mr *MockClientMockRecorder) CreateFirewall(firewall, allowed, direction, network, sourceRanges, targetTags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFirewall", reflect.TypeOf((*MockClient)(nil).CreateFirewall), firewall, allowed, direction, network, sourceRanges, targetTags)
}

// CreateForwardingRule mocks base method.
func (m *MockClient) CreateForwardingRule(forwardingRule, ipAddress, region, subnet, target string) (*compute.ForwardingRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForwardingRule", forwardingRule, ipAddress, region, subnet, target)
	ret0, _ := ret[0].(*compute.ForwardingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateForwardingRule indicates an expected call of CreateForwardingRule.
func (mr *MockClientMockRecorder) CreateForwardingRule(forwardingRule, ipAddress, region, subnet, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForwardingRule", reflect.TypeOf((*MockClient)(nil).CreateForwardingRule), forwardingRule, ipAddress, region, subnet, target)
}

// CreateManagedZone mocks base method.
func (m *MockClient) CreateManagedZone(managedZone *dns.ManagedZone) (*dns.ManagedZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManagedZone", managedZone)
	ret0, _ := ret[0].(*dns.ManagedZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateManagedZone indicates an expected call of CreateManagedZone.
func (mr *MockClientMockRecorder) CreateManagedZone(managedZone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManagedZone", reflect.TypeOf((*MockClient)(nil).CreateManagedZone), managedZone)
}

// CreateServiceAttachment mocks base method.
func (m *MockClient) CreateServiceAttachment(serviceAttachment, region, forwardingRule string, subnets, acceptList []string) (*compute.ServiceAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceAttachment", serviceAttachment, region, forwardingRule, subnets, acceptList)
	ret0, _ := ret[0].(*compute.ServiceAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceAttachment indicates an expected call of CreateServiceAttachment.
func (mr *MockClientMockRecorder) CreateServiceAttachment(serviceAttachment, region, forwardingRule, subnets, acceptList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAttachment", reflect.TypeOf((*MockClient)(nil).CreateServiceAttachment), serviceAttachment, region, forwardingRule, subnets, acceptList)
}

// CreateSubnet mocks base method.
func (m *MockClient) CreateSubnet(subnet, network, region, ipCidr, purpose string) (*compute.Subnetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnet", subnet, network, region, ipCidr, purpose)
	ret0, _ := ret[0].(*compute.Subnetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnet indicates an expected call of CreateSubnet.
func (mr *MockClientMockRecorder) CreateSubnet(subnet, network, region, ipCidr, purpose interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnet", reflect.TypeOf((*MockClient)(nil).CreateSubnet), subnet, network, region, ipCidr, purpose)
}

// DeleteAddress mocks base method.
func (m *MockClient) DeleteAddress(addressName, region string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", addressName, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockClientMockRecorder) DeleteAddress(addressName, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockClient)(nil).DeleteAddress), addressName, region)
}

// DeleteFirewall mocks base method.
func (m *MockClient) DeleteFirewall(firewall string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFirewall", firewall)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFirewall indicates an expected call of DeleteFirewall.
func (mr *MockClientMockRecorder) DeleteFirewall(firewall interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFirewall", reflect.TypeOf((*MockClient)(nil).DeleteFirewall), firewall)
}

// DeleteForwardingRule mocks base method.
func (m *MockClient) DeleteForwardingRule(forwardingRule, region string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForwardingRule", forwardingRule, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteForwardingRule indicates an expected call of DeleteForwardingRule.
func (mr *MockClientMockRecorder) DeleteForwardingRule(forwardingRule, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForwardingRule", reflect.TypeOf((*MockClient)(nil).DeleteForwardingRule), forwardingRule, region)
}

// DeleteManagedZone mocks base method.
func (m *MockClient) DeleteManagedZone(managedZone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteManagedZone", managedZone)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteManagedZone indicates an expected call of DeleteManagedZone.
func (mr *MockClientMockRecorder) DeleteManagedZone(managedZone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManagedZone", reflect.TypeOf((*MockClient)(nil).DeleteManagedZone), managedZone)
}

// DeleteResourceRecordSet mocks base method.
func (m *MockClient) DeleteResourceRecordSet(managedZone string, recordSet *dns.ResourceRecordSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceRecordSet", managedZone, recordSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceRecordSet indicates an expected call of DeleteResourceRecordSet.
func (mr *MockClientMockRecorder) DeleteResourceRecordSet(managedZone, recordSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceRecordSet", reflect.TypeOf((*MockClient)(nil).DeleteResourceRecordSet), managedZone, recordSet)
}

// DeleteResourceRecordSets mocks base method.
func (m *MockClient) DeleteResourceRecordSets(managedZone string, recordSet []*dns.ResourceRecordSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceRecordSets", managedZone, recordSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceRecordSets indicates an expected call of DeleteResourceRecordSets.
func (mr *MockClientMockRecorder) DeleteResourceRecordSets(managedZone, recordSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceRecordSets", reflect.TypeOf((*MockClient)(nil).DeleteResourceRecordSets), managedZone, recordSet)
}

// DeleteServiceAttachment mocks base method.
func (m *MockClient) DeleteServiceAttachment(serviceAttachment, region string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAttachment", serviceAttachment, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceAttachment indicates an expected call of DeleteServiceAttachment.
func (mr *MockClientMockRecorder) DeleteServiceAttachment(serviceAttachment, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAttachment", reflect.TypeOf((*MockClient)(nil).DeleteServiceAttachment), serviceAttachment, region)
}

// DeleteSubnet mocks base method.
func (m *MockClient) DeleteSubnet(subnet, region string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnet", subnet, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubnet indicates an expected call of DeleteSubnet.
func (mr *MockClientMockRecorder) DeleteSubnet(subnet, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnet", reflect.TypeOf((*MockClient)(nil).DeleteSubnet), subnet, region)
}

// GetAddress mocks base method.
func (m *MockClient) GetAddress(addressName, region string) (*compute.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", addressName, region)
	ret0, _ := ret[0].(*compute.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockClientMockRecorder) GetAddress(addressName, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockClient)(nil).GetAddress), addressName, region)
}

// GetFirewall mocks base method.
func (m *MockClient) GetFirewall(firewall string) (*compute.Firewall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirewall", firewall)
	ret0, _ := ret[0].(*compute.Firewall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirewall indicates an expected call of GetFirewall.
func (mr *MockClientMockRecorder) GetFirewall(firewall interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirewall", reflect.TypeOf((*MockClient)(nil).GetFirewall), firewall)
}

// GetForwardingRule mocks base method.
func (m *MockClient) GetForwardingRule(forwardingRule, region string) (*compute.ForwardingRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForwardingRule", forwardingRule, region)
	ret0, _ := ret[0].(*compute.ForwardingRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForwardingRule indicates an expected call of GetForwardingRule.
func (mr *MockClientMockRecorder) GetForwardingRule(forwardingRule, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForwardingRule", reflect.TypeOf((*MockClient)(nil).GetForwardingRule), forwardingRule, region)
}

// GetManagedZone mocks base method.
func (m *MockClient) GetManagedZone(managedZone string) (*dns.ManagedZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagedZone", managedZone)
	ret0, _ := ret[0].(*dns.ManagedZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagedZone indicates an expected call of GetManagedZone.
func (mr *MockClientMockRecorder) GetManagedZone(managedZone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedZone", reflect.TypeOf((*MockClient)(nil).GetManagedZone), managedZone)
}

// GetNetwork mocks base method.
func (m *MockClient) GetNetwork(name string) (*compute.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", name)
	ret0, _ := ret[0].(*compute.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockClientMockRecorder) GetNetwork(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockClient)(nil).GetNetwork), name)
}

// GetProjectName mocks base method.
func (m *MockClient) GetProjectName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProjectName indicates an expected call of GetProjectName.
func (mr *MockClientMockRecorder) GetProjectName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectName", reflect.TypeOf((*MockClient)(nil).GetProjectName))
}

// GetServiceAttachment mocks base method.
func (m *MockClient) GetServiceAttachment(serviceAttachment, region string) (*compute.ServiceAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAttachment", serviceAttachment, region)
	ret0, _ := ret[0].(*compute.ServiceAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAttachment indicates an expected call of GetServiceAttachment.
func (mr *MockClientMockRecorder) GetServiceAttachment(serviceAttachment, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAttachment", reflect.TypeOf((*MockClient)(nil).GetServiceAttachment), serviceAttachment, region)
}

// GetSubnet mocks base method.
func (m *MockClient) GetSubnet(name, region, project string) (*compute.Subnetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnet", name, region, project)
	ret0, _ := ret[0].(*compute.Subnetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnet indicates an expected call of GetSubnet.
func (mr *MockClientMockRecorder) GetSubnet(name, region, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnet", reflect.TypeOf((*MockClient)(nil).GetSubnet), name, region, project)
}

// ListAddresses mocks base method.
func (m *MockClient) ListAddresses(region string, opts gcpclient.ListAddressesOptions) (*compute.AddressList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddresses", region, opts)
	ret0, _ := ret[0].(*compute.AddressList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddresses indicates an expected call of ListAddresses.
func (mr *MockClientMockRecorder) ListAddresses(region, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddresses", reflect.TypeOf((*MockClient)(nil).ListAddresses), region, opts)
}

// ListComputeImages mocks base method.
func (m *MockClient) ListComputeImages(arg0 gcpclient.ListComputeImagesOptions) (*compute.ImageList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComputeImages", arg0)
	ret0, _ := ret[0].(*compute.ImageList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComputeImages indicates an expected call of ListComputeImages.
func (mr *MockClientMockRecorder) ListComputeImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComputeImages", reflect.TypeOf((*MockClient)(nil).ListComputeImages), arg0)
}

// ListComputeInstances mocks base method.
func (m *MockClient) ListComputeInstances(arg0 gcpclient.ListComputeInstancesOptions, arg1 func(*compute.InstanceAggregatedList) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComputeInstances", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListComputeInstances indicates an expected call of ListComputeInstances.
func (mr *MockClientMockRecorder) ListComputeInstances(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComputeInstances", reflect.TypeOf((*MockClient)(nil).ListComputeInstances), arg0, arg1)
}

// ListComputeZones mocks base method.
func (m *MockClient) ListComputeZones(arg0 gcpclient.ListComputeZonesOptions) (*compute.ZoneList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComputeZones", arg0)
	ret0, _ := ret[0].(*compute.ZoneList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComputeZones indicates an expected call of ListComputeZones.
func (mr *MockClientMockRecorder) ListComputeZones(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComputeZones", reflect.TypeOf((*MockClient)(nil).ListComputeZones), arg0)
}

// ListManagedZones mocks base method.
func (m *MockClient) ListManagedZones(opts gcpclient.ListManagedZonesOptions) (*dns.ManagedZonesListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListManagedZones", opts)
	ret0, _ := ret[0].(*dns.ManagedZonesListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListManagedZones indicates an expected call of ListManagedZones.
func (mr *MockClientMockRecorder) ListManagedZones(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedZones", reflect.TypeOf((*MockClient)(nil).ListManagedZones), opts)
}

// ListResourceRecordSets mocks base method.
func (m *MockClient) ListResourceRecordSets(managedZone string, opts gcpclient.ListResourceRecordSetsOptions) (*dns.ResourceRecordSetsListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceRecordSets", managedZone, opts)
	ret0, _ := ret[0].(*dns.ResourceRecordSetsListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceRecordSets indicates an expected call of ListResourceRecordSets.
func (mr *MockClientMockRecorder) ListResourceRecordSets(managedZone, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceRecordSets", reflect.TypeOf((*MockClient)(nil).ListResourceRecordSets), managedZone, opts)
}

// StartInstance mocks base method.
func (m *MockClient) StartInstance(arg0 *compute.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartInstance indicates an expected call of StartInstance.
func (mr *MockClientMockRecorder) StartInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstance", reflect.TypeOf((*MockClient)(nil).StartInstance), arg0)
}

// StopInstance mocks base method.
func (m *MockClient) StopInstance(arg0 *compute.Instance, arg1 ...gcpclient.InstancesStopCallOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopInstance", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopInstance indicates an expected call of StopInstance.
func (mr *MockClientMockRecorder) StopInstance(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstance", reflect.TypeOf((*MockClient)(nil).StopInstance), varargs...)
}

// UpdateResourceRecordSet mocks base method.
func (m *MockClient) UpdateResourceRecordSet(managedZone string, addRecordSet, removeRecordSet *dns.ResourceRecordSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceRecordSet", managedZone, addRecordSet, removeRecordSet)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResourceRecordSet indicates an expected call of UpdateResourceRecordSet.
func (mr *MockClientMockRecorder) UpdateResourceRecordSet(managedZone, addRecordSet, removeRecordSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceRecordSet", reflect.TypeOf((*MockClient)(nil).UpdateResourceRecordSet), managedZone, addRecordSet, removeRecordSet)
}
